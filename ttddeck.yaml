#
#   TTDDec is a Homeassistant remote that is aming to have the look and feel of a StreamDeck for simple control going through the Home assistant.
#
#
substitutions:
  #Name and version 
  name: ttddeck
  version: "1.3.0"
  device_description: ${name} - v${version}.

  # Screen setings
  background_color: super_dark_gray
  tile_color: dark_gray
  tile_shadow_color: black
  tile_off_color: gray
  height : 180
  width : 640
  y_offset : 4
  max_x : ${width}-1 
  min_x : 0    
  max_y : ${height} + ${y_offset} -1
  min_y : ${y_offset}
  center_y : ${height} + ${y_offset} / 2

  header_height : 25
  footer_height : 25

  last_page : 3   # 0 setup + 1,2  action, 3 Printer status 

  action_area_height :  ${max_y} - ${header_height} - ${footer_height}
  action_area_margin : 10
  actions_pr_page : 4
  action_tile_size_x : ${action_area_height} - ${action_area_margin} - ${action_area_margin}
  action_tile_size_y : ${action_tile_size_x}
  action_tile_space : 25
  action_icon_size : 100x100        # NEED TO BE RECALCULATED 
  action_page_shift_size : 55
  action_tile_text_size : 15
  setup_line_height : 30
  nav_icon_size : 50x100            # NEED TO BE RECALCULATED 
  nav_color: gray

  #Action type
  action_type_none   : 0
  action_type_light  : 1
  action_type_switch : 2
  action_type_page   : 3

  # Actions
  action_1 :
    icon: action_icon_lightbulb
    text: "Office"
    color : yellow
    type : ${action_type_light}
    entity_id : light.kontor_lampe
    info: 0
  action_2 :
    icon: action_icon_printer_3d
    text: "3D Printer"
    color : purple
    type : ${action_type_switch}
    entity_id : switch.printer_on_off_switch_switch 
    info: 0
  action_3 :
    icon: action_icon_gauge
    text: "3D status"
    color : purple
    type : ${action_type_page}
    entity_id : switch.printer_on_off_switch_switch
    info: 3     #Page 3
  action_4 :
    icon: action_icon_lightbulb
    text: "3D light"
    color : purple
    type : ${action_type_light}
    entity_id : light.a1_mini_enclosure_led_strip
    info: 0
  action_5 :
    icon: action_icon_led_strip
    text: "Workdesk light"
    color : blue
    type : ${action_type_light}
    entity_id : light.dimse_lys   
    info: 0
  action_6 :
    icon: action_icon_led_strip
    text: "Behind Workdesk"
    color : dark_blue 
    type : ${action_type_light}
    entity_id : light.bag_dimse_bord_2  
    info: 0
  action_7 :
    icon: action_icon_printer_3d
    text: "3D printer"
    color : purple
    type : ${action_type_switch}
    entity_id : switch.printer_on_off_switch_switch 
    info: 0
  action_8 :
    icon: action_icon_lightbulb
    text: "Office"
    color : yellow
    type : ${action_type_light}
    entity_id : light.kontor_lampe
    info: 0
    
  #Sensors
  sensor_temperature: weather.forecast_home_hourly_temperature
  sensor_home_temperature: sensor.kontor_sensor_temperature
  sensor_home_humidity: sensor.kontor_sensor_humidity
  sensor_print_job: sensor.a1mini_0309da3c0900033_task_name
  sensor_print_progress: sensor.a1mini_0309da3c0900033_print_progress
  sensor_print_est_finish: sensor.a1mini_0309da3c0900033_end_time

globals:
  - id: inactivity_time
    type: int
    restore_value: yes
    initial_value: '0'
  - id: current_page
    type: int
    restore_value: yes
    initial_value: '1'
  - id: action_page
    type: int
    restore_value: no
    initial_value: '0'

esphome:
  name: ${name}
  friendly_name: ${device_description}
  name_add_mac_suffix: false

psram:
  mode: octal

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set up a wifi access point
  ap: {}

captive_portal:

#Find the Google fonts here : https://fonts.google.com/ 
font:
  - file: "gfonts://Roboto"
    id: title_font
    size: 70
  - file: "gfonts://Roboto"
    id: setup_font
    size: ${setup_line_height}
  - file: "gfonts://Roboto"
    id: tile_text_font
    size: ${action_tile_text_size}
  - file: "gfonts://Roboto"
    id: header_font
    size: ${header_height}
  - file: "gfonts://Roboto"
    id: footer_font
    size: ${footer_height}
  - file: "gfonts://Orbitron"
    id: clock_font
    size: 110

image:      #Find MDI icons here https://pictogrammers.com/library/mdi/  
  defaults:
    resize: 25x25
    type: BINARY
    transparency: chroma_key
  images:
  - file: mdi:white-balance-sunny
    id: icon_weather
  - file: mdi:home-thermometer
    id: icon_temperature
  - file: mdi:water-percent
    id: icon_humidity
  - file: mdi:home-automation
    id: icon_devices
  - file: mdi:cog
    id: icon_settings
  - file: mdi:cog
    id: action_icon_settings
  - file: mdi:clock-time-ten-outline
    id: icon_clock
  - file: mdi:gauge
    id: action_icon_gauge
    resize: ${action_icon_size}
  - file: mdi:led-strip-variant
    id: action_icon_led_strip
    resize: ${action_icon_size}
  - file: mdi:printer-3d
    id: action_icon_printer_3d
    resize: ${action_icon_size}
  - file: mdi:lightbulb-outline
    id: action_icon_lightbulb
    resize: ${action_icon_size}
  - file: mdi:chevron-left
    id: nav_icon_prev
    resize: ${nav_icon_size}
  - file: mdi:chevron-right
    id: nav_icon_next
    resize: ${nav_icon_size}

## Good coulor Referance : https://en.wikipedia.org/wiki/Web_colors 
color:
  - id: black
    hex: '000000'
  - id: red
    hex: 'FF0000'
  - id: green
    hex: '008800'
  - id: yellow
    hex: 'FFFF00'
  - id: orange
    hex: 'FFA500'
  - id: white
    hex: 'ffffff'
  - id: goast_white
    hex: 'F8F8FF'
  - id: gray
    hex: '808080'
  - id: light_gray
    hex: 'D3D3D3'
  - id: dark_gray
    hex: '404040'
  - id: dark_slate_gray
    hex: '2F4F4F'
  - id: super_dark_gray
    hex: '202020'
  - id: lime
    hex: '00ff00'
  - id: blue
    hex: '0000FF'
  - id: dark_blue
    hex: '000080'
  - id: magenta
    hex: 'FF00FF'
  - id: purple
    hex: '800080'

# This will fetch time from Home Assistant
time:
  - platform: homeassistant
    id: esptime

# Create sensors from HA you want to use and show
sensor:
  - platform: homeassistant
    id: sensor_temperature
    entity_id: ${sensor_temperature}
    internal: true
  - platform: homeassistant
    id: sensor_home_temperature
    entity_id: ${sensor_home_temperature}
    internal: true
  - platform: homeassistant
    id: sensor_home_humidity
    entity_id: ${sensor_home_humidity}
    internal: true
  - platform: homeassistant
    id: sensor_print_progress
    entity_id: ${sensor_print_progress}
    internal: true
  
#Numbers available in HA
number:
  - platform: template
    name: "Time-Out"
    id: time_out
    icon: "mdi:timer-sand"
    optimistic: true
    min_value: 10
    max_value: 600
    step: 10
    initial_value: 100
    unit_of_measurement: "s"
    restore_value: true
  - platform: template
    name: "Dimm Timer-Out"
    id: dim_time_out
    icon: "mdi:timer-sand"
    optimistic: true
    min_value: 10
    max_value: 600
    step: 10
    initial_value: 60
    unit_of_measurement: "s"
    restore_value: true

interval:
  - interval: 1s
    then: #increment timer 
    - lambda: |-
        id(inactivity_time) += 1;
    - if: # check for dim or off
        condition:
          - lambda: 'return id(inactivity_time) == id(dim_time_out).state;'
        then:
          - logger.log: 'Display-Dim Reached'
          - output.set_level:
              id: backlight_pwm
              level: 5%
        else:
          - if:
              condition:
                - lambda: 'return id(inactivity_time) > id(time_out).state;'
              then:
                - logger.log: 'Display-Off Reached'
                - output.turn_off: backlight_pwm
                - globals.set:
                    id: current_page
                    value: '-1'
                - globals.set:
                    id: action_page
                    value: '0'

spi:
  - id: display_qspi
    type: quad
    clk_pin: 17
    data_pins:
      - 13
      - 18
      - 21
      - 14

i2c:
  sda: 15
  scl: 10
  frequency: 300kHz
  id: touchscreen_bus

touchscreen:
  - platform: axs15231
    id: main_touch
    display: main_display
    i2c_id: touchscreen_bus
    transform:
      mirror_x: true
      mirror_y: true
      swap_xy: false
    calibration:
      x_min: 0
      x_max: 640
      y_min: 0
      y_max: 180
    on_touch:
      - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d, state=%d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw,
            touch.state
          );
      - lambda: |-
          id(inactivity_time) = 0;
          id(backlight_pwm).turn_on();

binary_sensor:
  - platform: touchscreen
    name: setup_page
    internal: true
    x_min: 580
    x_max: 630
    y_min: 0
    y_max: 50
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
        - lambda: |-
            ESP_LOGI("Button press","setup");
            if (id(current_page) != 0)
            {
              id(current_page) = 0;
            } else {
              id(current_page) = 1;
            }
  - platform: touchscreen
    name: home_page
    internal: true
    x_min: 580
    x_max: 630
    y_min: 150
    y_max: 180
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
        - lambda: |-
            ESP_LOGI("Button press","home");
            id(current_page) = 1;
  - platform: touchscreen
    name: clock_page
    internal: true
    x_min: 0
    x_max: 50
    y_min: 0
    y_max: 50
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
        - lambda: |-
            ESP_LOGI("Button press","Clock");
            id(current_page) = -1;

  - platform: touchscreen
    name: prev_page
    internal: true
    x_min: 0
    x_max: 50
    y_min: 40
    y_max: 140
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
        - lambda: |-
            ESP_LOGI("Button press","Previous screen");
            if (id(current_page) == 0)
            {
              id(current_page) = ${last_page};
            } else {
              id(current_page) = id(current_page) -1;
            } 
  - platform: touchscreen
    name: next_page
    internal: true
    x_min: 590
    x_max: 640
    y_min: 40
    y_max: 140
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
        - lambda: |-
            ESP_LOGI("Button press","Next screen");
            if (id(current_page) == ${last_page})
            {
              id(current_page) = 0;
            } else {
              id(current_page) = id(current_page) + 1;
            }
  ## 
  ## Action Buttone functions
  ##
  - platform: touchscreen
    name: action_button_1
    internal: true
    x_min: 55
    x_max: 170
    y_min: 40
    y_max: 140
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==1;'
          then:
            - logger.log: 'Action Button 1 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_1.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_1.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_1.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_1.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_1.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_1.info};'
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==2;'
          then:
            - logger.log: 'Action Button 5 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_5.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_5.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_5.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_5.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_5.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_5.info};'

  - platform: touchscreen
    name: action_button_2
    internal: true
    x_min: 195
    x_max: 310
    y_min: 40
    y_max: 140
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==1;'
          then:
            - logger.log: 'Action Button 2 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_2.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_2.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_2.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_2.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_2.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_2.info};'
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==2;'
          then:
            - logger.log: 'Action Button 6 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_6.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_6.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_6.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_6.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_6.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_6.info};'

  - platform: touchscreen
    name: action_button_3
    internal: true
    x_min: 330
    x_max: 445
    y_min: 40
    y_max: 140
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==1;'
          then:
            - logger.log: 'Action Button 3 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_3.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_3.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_3.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_3.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_3.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_3.info};'
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==2;'
          then:
            - logger.log: 'Action Button 7 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_7.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_7.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_7.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_7.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_7.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_7.info};'

  - platform: touchscreen
    name: action_button_4
    internal: true
    x_min: 468
    x_max: 580
    y_min: 40
    y_max: 140
    on_click:
      min_length: 50ms
      max_length: 400ms
      then:
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==1;'
          then:
            - logger.log: 'Action Button 4 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_4.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_4.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_4.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_4.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_4.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_4.info};'
      - if: #Check for right Action Button
          condition:
            - lambda: 'return id(action_page)==2;'
          then:
            - logger.log: 'Action Button 8 pressed'
            - if:
                condition:
                  - lambda: 'return ${action_8.type} == ${action_type_light};'
                then:
                  - homeassistant.service:
                      service: light.toggle
                      data:
                        entity_id: ${action_8.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_8.type} == ${action_type_switch};'
                then:
                  - homeassistant.service:
                      service: switch.toggle
                      data:
                        entity_id: ${action_8.entity_id}
            - if:
                condition:
                  - lambda: 'return ${action_8.type} == ${action_type_page};'
                then:
                  - lambda: 'id(current_page) = ${action_8.info};'

text_sensor:
  - platform: wifi_info
    ip_address:
      name: TCP/IP Address
      id: tcp_ip_address
  - platform: homeassistant
    id: sensor_print_job
    entity_id: ${sensor_print_job}
    internal: true
  - platform: homeassistant
    id: sensor_print_est_finish
    entity_id: ${sensor_print_est_finish}
    internal: true
##Workaround for the Entity links
  - platform: homeassistant
    id: action_entity_1
    entity_id: ${action_1.entity_id}
    internal: True
  - platform: homeassistant
    id: action_entity_2
    entity_id: ${action_2.entity_id}
    internal: True  
  - platform: homeassistant
    id: action_entity_3
    entity_id: ${action_3.entity_id}
    internal: True  
  - platform: homeassistant
    id: action_entity_4
    entity_id: ${action_4.entity_id}
    internal: True
  - platform: homeassistant
    id: action_entity_5
    entity_id: ${action_5.entity_id}
    internal: True
  - platform: homeassistant
    id: action_entity_6
    entity_id: ${action_6.entity_id}
    internal: True
  - platform: homeassistant
    id: action_entity_7
    entity_id: ${action_7.entity_id}
    internal: True
  - platform: homeassistant
    id: action_entity_8
    entity_id: ${action_8.entity_id}
    internal: True

output:
  - platform: ledc
    pin: GPIO1
    id: backlight_pwm

light:
  - platform: monochromatic
    output: backlight_pwm
    name: Display
    id: backlight
    restore_mode: ALWAYS_ON
    internal: True

display:
  - platform: mipi_spi
    id: main_display
    spi_id: display_qspi
    model: AXS15231
    dimensions:
      height: 640     
      width: 184     #180
    cs_pin: 12
    reset_pin: 16
    rotation: 90
    auto_clear_enabled: false
    pages:
      - id: home
        lambda: |-       
          it.fill(id(${background_color}));
          id(action_page) = 0;
          Color progress_color = id(blue);

          //Variable content
          switch (id(current_page)) {     
            case 0:   //Setup
              it.printf((${action_page_shift_size}),(${header_height} + ${action_area_margin}),id(setup_font),id(blue), "${device_description}" );
              it.printf((${action_page_shift_size}),(${header_height} + ${action_area_margin}) + (${setup_line_height}),id(setup_font), "%s", id(tcp_ip_address).state.c_str() ); 
            break;

            case 1: 
              id(action_page) = 1;
            case 2:      //Action Area
              if (id(action_page) == 0) id(action_page) = 2;
              for (int col = 0; col < ${actions_pr_page}; col++) {
                int index = col+1+((id(action_page)-1)*${actions_pr_page});   //Only on page 1 and 2
                int x = (${action_page_shift_size}) + col * (${action_tile_space}+${action_tile_size_x});
                int y = ${header_height} + ${action_area_margin};

                /////ESP_LOGI("Icon Index", "x=%d, y=%d, x_raw=%d, y_raw=%0d, index:%d", x, y, (${action_tile_size_x}),(${action_tile_size_y}), index);

                // Shadow (slightly offset dark rectangle)
                it.filled_rectangle(x + 3, y + 3, ${action_tile_size_x}, ${action_tile_size_y}, id(${tile_shadow_color}));
                // button background
                it.filled_rectangle(x, y, ${action_tile_size_x}, ${action_tile_size_y}, id(${tile_color}));

                switch (index) {
                  case 1:
                    if ((id(action_entity_1).state == "on") || (${action_1.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_1.icon}),id(${action_1.color}));  
                    else
                      it.image(x+8, y, id(${action_1.icon}), id(${tile_off_color})); 
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_1.text}"); 
                  break;
                  case 2:
                    if ((id(action_entity_2).state == "on") || (${action_2.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_2.icon}),id(${action_2.color}));  
                    else
                      it.image(x+8, y, id(${action_2.icon}), id(${tile_off_color}));  
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_2.text}"); 
                  break;
                  case 3:
                    if ((id(action_entity_3).state == "on") || (${action_3.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_3.icon}),id(${action_3.color}));  
                    else
                      it.image(x+8, y, id(${action_3.icon}), id(${tile_off_color}));  
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_3.text}"); 
                  break;
                  case 4:
                    if ((id(action_entity_4).state == "on") || (${action_4.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_4.icon}),id(${action_4.color}));  
                    else
                      it.image(x+8, y, id(${action_4.icon}), id(${tile_off_color}));  
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_4.text}"); 
                  break;
                  case 5:
                    if ((id(action_entity_5).state == "on") || (${action_5.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_5.icon}),id(${action_5.color}));  
                    else
                      it.image(x+8, y, id(${action_5.icon}), id(${tile_off_color}));  
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_5.text}"); 
                  break;                  
                  case 6:
                    if ((id(action_entity_6).state == "on") || (${action_6.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_6.icon}),id(${action_6.color}));  
                    else
                      it.image(x+8, y, id(${action_6.icon}), id(${tile_off_color}));  
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_6.text}"); 
                  break;
                  case 7:
                    if ((id(action_entity_7).state == "on") || (${action_7.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_7.icon}),id(${action_7.color}));  
                    else
                      it.image(x+8, y, id(${action_7.icon}), id(${tile_off_color}));  
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_7.text}"); 
                  break;                  
                  case 8:
                    if ((id(action_entity_8).state == "on") || (${action_8.type} == ${action_type_page}))
                      it.image(x+8, y, id(${action_8.icon}),id(${action_8.color}));  
                    else
                      it.image(x+8, y, id(${action_8.icon}), id(${tile_off_color}));  
                    it.printf(x+(${action_tile_size_x})/2,y+(${action_tile_size_y}),id(tile_text_font),TextAlign::BOTTOM_CENTER,"${action_8.text}"); 
                  break;
                }
              }
            break;

            case 3:    //3D printer status
              it.printf((${action_page_shift_size}),(${header_height} + ${action_area_margin}),id(setup_font), "Current job:");
              it.printf((${action_page_shift_size}),(${header_height} + ${action_area_margin}) + (${setup_line_height}),id(setup_font),id(blue), "%s",id(sensor_print_job).state.c_str() );
              it.printf((${action_page_shift_size}),(${header_height} + ${action_area_margin}) + (${setup_line_height}*2),id(setup_font), "Estimated end time:");
              it.printf((${action_page_shift_size}),(${header_height} + ${action_area_margin}) + (${setup_line_height}*3),id(setup_font),id(blue), "%s", id(sensor_print_est_finish).state.c_str() );

              if (id(sensor_print_progress).state >= 99) progress_color = id(green);
              it.rectangle(399,${max_y}-${footer_height}-${action_area_margin}-${setup_line_height}, 202, (${setup_line_height}),progress_color); 
              it.filled_rectangle(400,${max_y}-${footer_height}-${action_area_margin}-${setup_line_height}, id(sensor_print_progress).state * 2, (${setup_line_height}),progress_color); 
              it.printf(480,${max_y}-${footer_height}-${action_area_margin}-${setup_line_height},id(setup_font), "%.0f%%", id(sensor_print_progress).state );
            break;

            case -1:
              it.strftime(320, (${header_height}), id(clock_font),TextAlign::TOP_CENTER, "%H:%M:%S", id(esptime).now());
            break;
          }

          if (id(current_page) >= 0) {
            //Navigation
            it.image(0, (${header_height} + ${action_area_margin}), id(nav_icon_prev),id(${nav_color}));  
            it.image(590, (${header_height} + ${action_area_margin}), id(nav_icon_next),id(${nav_color}));  

            //Footer and header 
            //it.line(${min_x}, ${min_y}+${header_height}, ${max_x}, ${min_y}+${header_height}, id(gray));   //header
            //it.line(${min_x}, ${max_y}-${footer_height}, ${max_x}, ${max_y}-${footer_height}, id(gray));   //footer

            it.strftime(320, ${min_y}, id(header_font),TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());
            it.strftime(320, ${max_y}-${footer_height}, id(footer_font),TextAlign::TOP_CENTER, "%d/%m/%y", id(esptime).now());
          }
          
          //Corner navigation
          it.image(${min_x},${min_y},id(icon_clock));
          it.image(${max_x}-${footer_height},${min_y},id(icon_settings));
          it.image(${max_x}-${footer_height},${max_y}-${footer_height},id(icon_devices));
